# %%
import sys
import warnings
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, List, Tuple, Any
from dataclasses import dataclass, field
from logging.handlers import RotatingFileHandler

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats


# %%
@dataclass
class PowerBIConfig:
    """
    Configuration pour la pr√©paration des donn√©es Power BI.

    Attributes:
        COUNTRY_CODE: Code ISO du pays
        COUNTRY_NAME: Nom complet du pays
        DIRECTORY_STRUCTURE: Structure des r√©pertoires
        KEY_INDICATORS: Indicateurs cl√©s √† mettre en avant
        PRIORITY_THEMES: Th√®mes prioritaires pour le storytelling
    """
    COUNTRY_CODE: str = "BJ"
    COUNTRY_NAME: str = "B√©nin"

    DIRECTORY_STRUCTURE: Dict[str, str] = field(
        default_factory=lambda: {
            "input_task1": "data_task_1/final_data",
            "input_task2": "data_task_2/enriched",
            "output": "data_task_3",
            "powerbi": "data_task_3/powerbi_ready",
            "insights": "data_task_3/insights",
            "exports": "data_task_3/exports",
            "visualizations": "data_task_3/visualizations",
            "logs": "logs_task_3",
        }
    )

    KEY_INDICATORS: List[str] = field(
        default_factory=lambda: [
            "population_growth_rate",
            "gdp_per_capita",
            "gdp_growth_rate",
            "net_enrollment_rate",
            "regional_development_index",
            "population_density"
        ]
    )

    PRIORITY_THEMES: List[str] = field(
        default_factory=lambda: [
            "D√©mographie",
            "√âconomie",
            "√âducation",
            "Sant√©",
            "D√©veloppement r√©gional"
        ]
    )


# %%
def setup_powerbi_environment(log_dir: Optional[Path] = None) -> None:
    """Configure l'environnement pour la pr√©paration Power BI."""
    warnings.filterwarnings("ignore")

    log_format = "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
    date_format = "%Y-%m-%d %H:%M:%S"

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter(log_format, date_format))

    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        datefmt=date_format,
        handlers=[console_handler],
    )

    if log_dir:
        log_dir = Path(log_dir)
        log_dir.mkdir(parents=True, exist_ok=True)
        file_handler = RotatingFileHandler(
            log_dir / "powerbi_prep.log",
            maxBytes=5_000_000,
            backupCount=3,
            encoding="utf-8",
        )
        file_handler.setFormatter(logging.Formatter(log_format, date_format))
        logging.getLogger().addHandler(file_handler)

    pd.set_option("display.max_rows", 100)
    pd.set_option("display.max_columns", None)
    pd.set_option("display.float_format", "{:.2f}".format)


# %%
class DirectoryManager:
    """Gestion de la structure des r√©pertoires."""

    def __init__(self, base_dir: Optional[Path] = None, config: Optional[PowerBIConfig] = None):
        self.base_dir = base_dir or Path(".")
        self.config = config or PowerBIConfig()
        self.logger = logging.getLogger(self.__class__.__name__)
        self._directories: Dict[str, Path] = {}

    def initialize_structure(self) -> Dict[str, Path]:
        for name, path in self.config.DIRECTORY_STRUCTURE.items():
            full_path = self.base_dir / path
            full_path.mkdir(parents=True, exist_ok=True)
            self._directories[name] = full_path

        self.logger.info(f"‚úÖ {len(self._directories)} r√©pertoires cr√©√©s")
        return self._directories

    def get_path(self, name: str) -> Optional[Path]:
        return self._directories.get(name)


# %%
class DataLoader:
    """Chargement des donn√©es depuis les t√¢ches 1 et 2."""

    def __init__(self, input_dirs: Dict[str, Path]):
        self.input_dirs = input_dirs
        self.logger = logging.getLogger(self.__class__.__name__)

    def load_all_data(self) -> Dict[str, pd.DataFrame]:
        """Charge toutes les donn√©es disponibles."""
        datasets = {}

        # Charger les donn√©es de la t√¢che 1
        if "input_task1" in self.input_dirs and self.input_dirs["input_task1"].exists():
            self.logger.info("üìÇ Chargement donn√©es T√¢che 1...")
            for file_path in self.input_dirs["input_task1"].glob("*.csv"):
                try:
                    dataset_name = f"task1_{file_path.stem}"
                    df = pd.read_csv(file_path, encoding="utf-8")
                    if not df.empty:
                        datasets[dataset_name] = df
                        self.logger.info(f"‚úÖ {dataset_name}: {len(df)} lignes")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur {file_path.name}: {e}")

        # Charger les donn√©es de la t√¢che 2
        if "input_task2" in self.input_dirs and self.input_dirs["input_task2"].exists():
            self.logger.info("üìÇ Chargement donn√©es T√¢che 2...")
            for file_path in self.input_dirs["input_task2"].glob("*.csv"):
                try:
                    dataset_name = f"task2_{file_path.stem}"
                    df = pd.read_csv(file_path, encoding="utf-8")
                    if not df.empty:
                        datasets[dataset_name] = df
                        self.logger.info(f"‚úÖ {dataset_name}: {len(df)} lignes")
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur {file_path.name}: {e}")

        self.logger.info(f"üìä Total: {len(datasets)} datasets charg√©s")
        return datasets


# %%
class PowerBIDataPreparer:
    """Pr√©pare les donn√©es au format optimal pour Power BI."""

    def __init__(self, config: Optional[PowerBIConfig] = None):
        self.config = config or PowerBIConfig()
        self.logger = logging.getLogger(self.__class__.__name__)

    def create_fact_table(self, datasets: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """Cr√©e une table de faits consolid√©e."""
        self.logger.info("üîß Cr√©ation de la table de faits...")

        fact_tables = []

        for name, df in datasets.items():
            # Identifier les colonnes cl√©s
            temp_df = df.copy()

            # Ajouter la source
            temp_df['data_source'] = name

            # Standardiser les noms de colonnes
            column_mapping = {
                'ann√©e': 'year',
                'annee': 'year',
                'region': 'region',
                'r√©gion': 'region',
                'departement': 'department',
                'd√©partement': 'department',
                'commune': 'commune'
            }

            temp_df.columns = [
                column_mapping.get(col.lower(), col.lower())
                for col in temp_df.columns
            ]

            fact_tables.append(temp_df)

        # Concat√©ner toutes les tables
        fact_table = pd.concat(fact_tables, ignore_index=True, sort=False)

        self.logger.info(f"‚úÖ Table de faits cr√©√©e: {len(fact_table)} lignes")
        return fact_table

    def create_dimension_time(self, fact_table: pd.DataFrame) -> pd.DataFrame:
        """Cr√©e une dimension temporelle."""
        self.logger.info("üìÖ Cr√©ation dimension temps...")

        # Identifier la colonne de temps
        time_col = None
        for col in ['year', 'ann√©e', 'date']:
            if col in fact_table.columns:
                time_col = col
                break

        if time_col is None:
            self.logger.warning("‚ö†Ô∏è Aucune colonne temporelle trouv√©e")
            return pd.DataFrame()

        # Extraire les ann√©es uniques
        years = fact_table[time_col].dropna().unique()

        dim_time = pd.DataFrame({
            'year': sorted(years),
            'year_id': range(len(years))
        })

        # Ajouter des cat√©gories temporelles
        dim_time['period'] = dim_time['year'].apply(
            lambda x: 'Historique' if x < 2020 else 'R√©cent'
        )

        dim_time['decade'] = (dim_time['year'] // 10) * 10

        self.logger.info(f"‚úÖ Dimension temps cr√©√©e: {len(dim_time)} ann√©es")
        return dim_time

    def create_dimension_geography(self, fact_table: pd.DataFrame) -> pd.DataFrame:
        """Cr√©e une dimension g√©ographique."""
        self.logger.info("üó∫Ô∏è Cr√©ation dimension g√©ographie...")

        geo_columns = {
            'region': [],
            'department': [],
            'commune': []
        }

        for col_name, values in geo_columns.items():
            if col_name in fact_table.columns:
                geo_columns[col_name] = fact_table[col_name].dropna().unique().tolist()

        # Cr√©er la hi√©rarchie g√©ographique
        geo_data = []
        geo_id = 1

        for region in geo_columns.get('region', []):
            geo_data.append({
                'geo_id': geo_id,
                'level': 'R√©gion',
                'name': region,
                'parent_id': None
            })
            region_id = geo_id
            geo_id += 1

            # D√©partements associ√©s
            if 'department' in fact_table.columns:
                depts = fact_table[
                    fact_table['region'] == region
                    ]['department'].dropna().unique()

                for dept in depts:
                    geo_data.append({
                        'geo_id': geo_id,
                        'level': 'D√©partement',
                        'name': dept,
                        'parent_id': region_id
                    })
                    dept_id = geo_id
                    geo_id += 1

                    # Communes associ√©es
                    if 'commune' in fact_table.columns:
                        communes = fact_table[
                            (fact_table['region'] == region) &
                            (fact_table['department'] == dept)
                            ]['commune'].dropna().unique()

                        for commune in communes:
                            geo_data.append({
                                'geo_id': geo_id,
                                'level': 'Commune',
                                'name': commune,
                                'parent_id': dept_id
                            })
                            geo_id += 1

        dim_geo = pd.DataFrame(geo_data)

        if not dim_geo.empty:
            self.logger.info(f"‚úÖ Dimension g√©ographie cr√©√©e: {len(dim_geo)} entit√©s")
        else:
            self.logger.warning("‚ö†Ô∏è Aucune donn√©e g√©ographique trouv√©e")

        return dim_geo

    def create_dimension_indicators(self, fact_table: pd.DataFrame) -> pd.DataFrame:
        """Cr√©e une dimension des indicateurs."""
        self.logger.info("üìä Cr√©ation dimension indicateurs...")

        # Liste des indicateurs avec leurs m√©tadonn√©es
        indicators_metadata = []
        indicator_id = 1

        numeric_cols = fact_table.select_dtypes(include=[np.number]).columns

        # Cat√©goriser les indicateurs
        categories = {
            'D√©mographie': ['population', 'density', 'growth_rate', 'age'],
            '√âconomie': ['gdp', 'economic', 'income', 'poverty'],
            '√âducation': ['education', 'school', 'enrollment', 'literacy'],
            'Sant√©': ['health', 'mortality', 'life_expectancy', 'hospital'],
            'Infrastructure': ['infrastructure', 'electricity', 'water', 'road']
        }

        for col in numeric_cols:
            col_lower = col.lower()

            # D√©terminer la cat√©gorie
            category = 'Autre'
            for cat, keywords in categories.items():
                if any(keyword in col_lower for keyword in keywords):
                    category = cat
                    break

            # D√©terminer l'unit√©
            unit = 'Nombre'
            if 'rate' in col_lower or 'pct' in col_lower or 'percentage' in col_lower:
                unit = '%'
            elif 'capita' in col_lower:
                unit = 'Par habitant'
            elif 'index' in col_lower:
                unit = 'Indice'

            indicators_metadata.append({
                'indicator_id': indicator_id,
                'indicator_name': col,
                'indicator_label': col.replace('_', ' ').title(),
                'category': category,
                'unit': unit,
                'is_key_indicator': col in self.config.KEY_INDICATORS
            })
            indicator_id += 1

        dim_indicators = pd.DataFrame(indicators_metadata)

        self.logger.info(f"‚úÖ Dimension indicateurs cr√©√©e: {len(dim_indicators)} indicateurs")
        return dim_indicators

    def optimize_for_powerbi(self, df: pd.DataFrame) -> pd.DataFrame:
        """Optimise le DataFrame pour Power BI."""
        self.logger.info("‚ö° Optimisation pour Power BI...")

        optimized = df.copy()

        # Convertir les types de donn√©es
        for col in optimized.columns:
            # Convertir les objets en cat√©gories si peu de valeurs uniques
            if optimized[col].dtype == 'object':
                n_unique = optimized[col].nunique()
                if n_unique < len(optimized) * 0.5:
                    optimized[col] = optimized[col].astype('category')

            # Convertir les floats en int si appropri√©
            elif optimized[col].dtype == 'float64':
                if optimized[col].notna().all():
                    if (optimized[col] == optimized[col].astype(int)).all():
                        optimized[col] = optimized[col].astype('int32')

        # Supprimer les colonnes enti√®rement vides
        optimized = optimized.dropna(axis=1, how='all')

        # Trier par colonnes temporelles et g√©ographiques
        sort_cols = []
        for col in ['year', 'region', 'department']:
            if col in optimized.columns:
                sort_cols.append(col)

        if sort_cols:
            optimized = optimized.sort_values(sort_cols)

        self.logger.info(f"‚úÖ Optimisation termin√©e: {optimized.memory_usage(deep=True).sum() / 1024 ** 2:.2f} MB")
        return optimized


# %%
class InsightGenerator:
    """G√©n√®re des insights pour le storytelling."""

    def __init__(self, config: Optional[PowerBIConfig] = None):
        self.config = config or PowerBIConfig()
        self.logger = logging.getLogger(self.__class__.__name__)

    def identify_key_trends(self, fact_table: pd.DataFrame) -> pd.DataFrame:
        """Identifie les tendances cl√©s."""
        self.logger.info("üìà Identification des tendances cl√©s...")

        trends = []

        # V√©rifier la pr√©sence d'une colonne temporelle
        time_col = None
        for col in ['year', 'ann√©e']:
            if col in fact_table.columns:
                time_col = col
                break

        if time_col is None:
            self.logger.warning("‚ö†Ô∏è Pas de colonne temporelle")
            return pd.DataFrame()

        # Analyser chaque indicateur num√©rique
        numeric_cols = fact_table.select_dtypes(include=[np.number]).columns

        for indicator in numeric_cols:
            if indicator == time_col:
                continue

            try:
                # Calculer la tendance
                temporal_data = fact_table.groupby(time_col)[indicator].mean()

                if len(temporal_data) < 2:
                    continue

                # Calcul du taux de croissance moyen
                first_value = temporal_data.iloc[0]
                last_value = temporal_data.iloc[-1]

                if first_value != 0:
                    total_growth = ((last_value - first_value) / first_value) * 100
                    avg_growth = total_growth / (len(temporal_data) - 1)

                    # D√©terminer la tendance
                    if avg_growth > 5:
                        trend_direction = "Forte hausse"
                    elif avg_growth > 1:
                        trend_direction = "Hausse mod√©r√©e"
                    elif avg_growth > -1:
                        trend_direction = "Stable"
                    elif avg_growth > -5:
                        trend_direction = "Baisse mod√©r√©e"
                    else:
                        trend_direction = "Forte baisse"

                    trends.append({
                        'indicator': indicator,
                        'trend_direction': trend_direction,
                        'avg_annual_growth': round(avg_growth, 2),
                        'total_growth': round(total_growth, 2),
                        'start_value': round(first_value, 2),
                        'end_value': round(last_value, 2),
                        'periods': len(temporal_data)
                    })

            except Exception as e:
                self.logger.debug(f"Erreur analyse {indicator}: {e}")
                continue

        trends_df = pd.DataFrame(trends)

        if not trends_df.empty:
            trends_df = trends_df.sort_values('avg_annual_growth', ascending=False)
            self.logger.info(f"‚úÖ {len(trends_df)} tendances identifi√©es")

        return trends_df

    def identify_regional_disparities(self, fact_table: pd.DataFrame) -> pd.DataFrame:
        """Identifie les disparit√©s r√©gionales."""
        self.logger.info("üó∫Ô∏è Analyse des disparit√©s r√©gionales...")

        disparities = []

        # V√©rifier la pr√©sence de colonnes g√©ographiques
        geo_col = None
        for col in ['region', 'r√©gion', 'department', 'd√©partement']:
            if col in fact_table.columns:
                geo_col = col
                break

        if geo_col is None:
            self.logger.warning("‚ö†Ô∏è Pas de colonne g√©ographique")
            return pd.DataFrame()

        # Analyser chaque indicateur
        numeric_cols = fact_table.select_dtypes(include=[np.number]).columns

        for indicator in numeric_cols:
            try:
                regional_stats = fact_table.groupby(geo_col)[indicator].agg([
                    'mean', 'std', 'min', 'max', 'count'
                ])

                if len(regional_stats) < 2:
                    continue

                # Coefficient de variation
                cv = (regional_stats['std'].mean() / regional_stats['mean'].mean()) * 100

                # Ratio max/min
                max_val = regional_stats['mean'].max()
                min_val = regional_stats['mean'].min()
                ratio = max_val / min_val if min_val > 0 else np.nan

                # R√©gions extr√™mes
                best_region = regional_stats['mean'].idxmax()
                worst_region = regional_stats['mean'].idxmin()

                disparities.append({
                    'indicator': indicator,
                    'coefficient_variation': round(cv, 2),
                    'max_min_ratio': round(ratio, 2),
                    'best_region': best_region,
                    'best_value': round(regional_stats.loc[best_region, 'mean'], 2),
                    'worst_region': worst_region,
                    'worst_value': round(regional_stats.loc[worst_region, 'mean'], 2),
                    'disparity_level': '√âlev√©e' if cv > 30 else 'Mod√©r√©e' if cv > 15 else 'Faible'
                })

            except Exception as e:
                self.logger.debug(f"Erreur analyse {indicator}: {e}")
                continue

        disparities_df = pd.DataFrame(disparities)

        if not disparities_df.empty:
            disparities_df = disparities_df.sort_values('coefficient_variation', ascending=False)
            self.logger.info(f"‚úÖ {len(disparities_df)} indicateurs analys√©s")

        return disparities_df

    def generate_priority_actions(self,
                                  trends_df: pd.DataFrame,
                                  disparities_df: pd.DataFrame) -> pd.DataFrame:
        """G√©n√®re des recommandations d'actions prioritaires."""
        self.logger.info("üéØ G√©n√©ration des actions prioritaires...")

        actions = []

        # Actions bas√©es sur les tendances n√©gatives
        if not trends_df.empty:
            negative_trends = trends_df[trends_df['avg_annual_growth'] < -2]

            for _, row in negative_trends.head(5).iterrows():
                actions.append({
                    'priority': 'Haute',
                    'theme': self._categorize_indicator(row['indicator']),
                    'indicator': row['indicator'],
                    'issue': f"D√©clin de {abs(row['avg_annual_growth']):.1f}% par an",
                    'action': f"Inverser la tendance n√©gative sur {row['indicator']}",
                    'type': 'Tendance'
                })

        # Actions bas√©es sur les disparit√©s
        if not disparities_df.empty:
            high_disparities = disparities_df[disparities_df['disparity_level'] == '√âlev√©e']

            for _, row in high_disparities.head(5).iterrows():
                actions.append({
                    'priority': 'Haute',
                    'theme': self._categorize_indicator(row['indicator']),
                    'indicator': row['indicator'],
                    'issue': f"√âcart important: {row['coefficient_variation']:.1f}%",
                    'action': f"R√©duire les in√©galit√©s r√©gionales sur {row['indicator']}",
                    'type': 'Disparit√©',
                    'target_region': row['worst_region']
                })

        actions_df = pd.DataFrame(actions)

        if not actions_df.empty:
            self.logger.info(f"‚úÖ {len(actions_df)} actions prioritaires g√©n√©r√©es")

        return actions_df

    def _categorize_indicator(self, indicator: str) -> str:
        """Cat√©gorise un indicateur par th√®me."""
        indicator_lower = indicator.lower()

        if any(kw in indicator_lower for kw in ['population', 'demographic', 'age']):
            return 'D√©mographie'
        elif any(kw in indicator_lower for kw in ['gdp', 'economic', 'income']):
            return '√âconomie'
        elif any(kw in indicator_lower for kw in ['education', 'school', 'enrollment']):
            return '√âducation'
        elif any(kw in indicator_lower for kw in ['health', 'mortality', 'hospital']):
            return 'Sant√©'
        else:
            return 'Autre'


# %%
class PowerBIOrchestrator:
    """Orchestre la pr√©paration compl√®te des donn√©es pour Power BI."""

    def __init__(self, config: Optional[PowerBIConfig] = None, base_dir: Optional[Path] = None):
        self.config = config or PowerBIConfig()
        self.base_dir = base_dir or Path(".")
        self.logger = logging.getLogger(__name__)

        # Initialiser les composants
        self.dir_manager = DirectoryManager(self.base_dir, self.config)
        self.directories = self.dir_manager.initialize_structure()

        self.loader = DataLoader({
            'input_task1': self.directories['input_task1'],
            'input_task2': self.directories['input_task2']
        })

        self.preparer = PowerBIDataPreparer(self.config)
        self.insight_generator = InsightGenerator(self.config)

    def run_complete_preparation(self) -> Dict[str, Any]:
        """Ex√©cute la pr√©paration compl√®te."""
        print("\n" + "=" * 80)
        print("üöÄ D√âMARRAGE PR√âPARATION POWER BI - T√ÇCHE 3")
        print("=" * 80)

        # 1. Chargement des donn√©es
        print("\nüìÇ √âTAPE 1: CHARGEMENT DES DONN√âES")
        print("-" * 80)
        datasets = self.loader.load_all_data()

        if not datasets:
            self.logger.error("‚ùå Aucune donn√©e disponible")
            return {}

        # 2. Cr√©ation de la table de faits
        print("\nüîß √âTAPE 2: CR√âATION TABLE DE FAITS")
        print("-" * 80)
        fact_table = self.preparer.create_fact_table(datasets)

        # 3. Cr√©ation des dimensions
        print("\nüìä √âTAPE 3: CR√âATION DES DIMENSIONS")
        print("-" * 80)

        dim_time = self.preparer.create_dimension_time(fact_table)
        dim_geo = self.preparer.create_dimension_geography(fact_table)
        dim_indicators = self.preparer.create_dimension_indicators(fact_table)

        # 4. Optimisation
        print("\n‚ö° √âTAPE 4: OPTIMISATION POUR POWER BI")
        print("-" * 80)

        fact_table_optimized = self.preparer.optimize_for_powerbi(fact_table)

        # 5. G√©n√©ration d'insights
        print("\nüí° √âTAPE 5: G√âN√âRATION D'INSIGHTS")
        print("-" * 80)

        trends = self.insight_generator.identify_key_trends(fact_table_optimized)
        disparities = self.insight_generator.identify_regional_disparities(fact_table_optimized)
        priority_actions = self.insight_generator.generate_priority_actions(trends, disparities)

        # 6. Sauvegarde des fichiers Power BI
        print("\nüíæ √âTAPE 6: EXPORT DES DONN√âES")
        print("-" * 80)

        output_files = {}

        # Table de faits
        fact_path = self.directories['powerbi'] / 'fact_table.csv'
        fact_table_optimized.to_csv(fact_path, index=False, encoding='utf-8-sig')
        output_files['fact_table'] = fact_path
        self.logger.info(f"‚úÖ Table de faits: {fact_path.name}")

        # Dimensions
        if not dim_time.empty:
            time_path = self.directories['powerbi'] / 'dim_time.csv'
            dim_time.to_csv(time_path, index=False, encoding='utf-8-sig')
            output_files['dim_time'] = time_path
            self.logger.info(f"‚úÖ Dimension temps: {time_path.name}")

        if not dim_geo.empty:
            geo_path = self.directories['powerbi'] / 'dim_geography.csv'
            dim_geo.to_csv(geo_path, index=False, encoding='utf-8-sig')
            output_files['dim_geography'] = geo_path
            self.logger.info(f"‚úÖ Dimension g√©ographie: {geo_path.name}")

        if not dim_indicators.empty:
            ind_path = self.directories['powerbi'] / 'dim_indicators.csv'
            dim_indicators.to_csv(ind_path, index=False, encoding='utf-8-sig')
            output_files['dim_indicators'] = ind_path
            self.logger.info(f"‚úÖ Dimension indicateurs: {ind_path.name}")

        # Insights
        if not trends.empty:
            trends_path = self.directories['insights'] / 'key_trends.csv'
            trends.to_csv(trends_path, index=False, encoding='utf-8-sig')
            output_files['trends'] = trends_path
            self.logger.info(f"‚úÖ Tendances cl√©s: {trends_path.name}")

        if not disparities.empty:
            disp_path = self.directories['insights'] / 'regional_disparities.csv'
            disparities.to_csv(disp_path, index=False, encoding='utf-8-sig')
            output_files['disparities'] = disp_path
            self.logger.info(f"‚úÖ Disparit√©s r√©gionales: {disp_path.name}")

        if not priority_actions.empty:
            actions_path = self.directories['insights'] / 'priority_actions.csv'
            priority_actions.to_csv(actions_path, index=False, encoding='utf-8-sig')
            output_files['priority_actions'] = actions_path
            self.logger.info(f"‚úÖ Actions prioritaires: {actions_path.name}")

        # 7. G√©n√©ration du guide Power BI
        print("\nüìñ √âTAPE 7: G√âN√âRATION DU GUIDE")
        print("-" * 80)

        guide = self._generate_powerbi_guide(
            fact_table_optimized,
            dim_time,
            dim_geo,
            dim_indicators,
            trends,
            disparities,
            priority_actions
        )

        guide_path = self.directories['exports'] / 'PowerBI_Implementation_Guide.md'
        with open(guide_path, 'w', encoding='utf-8') as f:
            f.write(guide)
        output_files['guide'] = guide_path
        self.logger.info(f"‚úÖ Guide Power BI: {guide_path.name}")

        # 8. G√©n√©ration du rapport de synth√®se
        print("\nüìù √âTAPE 8: RAPPORT DE SYNTH√àSE")
        print("-" * 80)

        synthesis_report = self._generate_synthesis_report(
            fact_table_optimized,
            trends,
            disparities,
            priority_actions
        )

        report_path = self.directories['exports'] / 'Rapport_Synthese_Task3.md'
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(synthesis_report)
        output_files['synthesis_report'] = report_path
        self.logger.info(f"‚úÖ Rapport de synth√®se: {report_path.name}")

        # 9. R√©sum√© final
        print("\n" + "=" * 80)
        print("‚úÖ PR√âPARATION TERMIN√âE AVEC SUCC√àS")
        print("=" * 80)

        print(f"\nüìä STATISTIQUES:")
        print(f"   - Lignes dans table de faits: {len(fact_table_optimized):,}")
        print(f"   - Colonnes: {len(fact_table_optimized.columns)}")
        print(f"   - Dimensions cr√©√©es: {sum([not dim_time.empty, not dim_geo.empty, not dim_indicators.empty])}")
        print(f"   - Tendances identifi√©es: {len(trends)}")
        print(f"   - Disparit√©s analys√©es: {len(disparities)}")
        print(f"   - Actions prioritaires: {len(priority_actions)}")

        print(f"\nüìÇ FICHIERS G√âN√âR√âS:")
        for name, path in output_files.items():
            print(f"   - {name}: {path}")

        print(f"\nüéØ PROCHAINES √âTAPES:")
        print(f"   1. Ouvrir Power BI Desktop")
        print(f"   2. Importer les fichiers CSV du dossier: {self.directories['powerbi']}")
        print(f"   3. Suivre le guide: {guide_path.name}")
        print(f"   4. Cr√©er les relations entre les tables")
        print(f"   5. Construire les visualisations selon le storytelling")
        print("=" * 80 + "\n")

        return {
            'fact_table': fact_table_optimized,
            'dimensions': {
                'time': dim_time,
                'geography': dim_geo,
                'indicators': dim_indicators
            },
            'insights': {
                'trends': trends,
                'disparities': disparities,
                'priority_actions': priority_actions
            },
            'output_files': output_files,
            'datasets_loaded': len(datasets)
        }

    def _generate_powerbi_guide(self,
                                fact_table: pd.DataFrame,
                                dim_time: pd.DataFrame,
                                dim_geo: pd.DataFrame,
                                dim_indicators: pd.DataFrame,
                                trends: pd.DataFrame,
                                disparities: pd.DataFrame,
                                priority_actions: pd.DataFrame) -> str:
        """G√©n√®re un guide d√©taill√© pour l'impl√©mentation Power BI."""

        guide = f"""# Guide d'Impl√©mentation Power BI - T√¢che 3
## Tableau de Bord B√©nin - ANIP

**Date de g√©n√©ration:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
**Pays:** {self.config.COUNTRY_NAME}

---

## üìã Table des Mati√®res

1. [Vue d'ensemble](#vue-densemble)
2. [Architecture des donn√©es](#architecture-des-donn√©es)
3. [Importation des donn√©es](#importation-des-donn√©es)
4. [Cr√©ation des relations](#cr√©ation-des-relations)
5. [Mesures DAX recommand√©es](#mesures-dax-recommand√©es)
6. [Visualisations recommand√©es](#visualisations-recommand√©es)
7. [Storytelling et structure](#storytelling-et-structure)
8. [Filtres et interactivit√©](#filtres-et-interactivit√©)

---

## 1. Vue d'ensemble

### Objectif
Cr√©er un tableau de bord interactif permettant:
- ‚úÖ Visualiser les tendances d√©mographiques, √©conomiques et sociales
- ‚úÖ Identifier les disparit√©s r√©gionales
- ‚úÖ Guider les d√©cisions strat√©giques
- ‚úÖ Raconter une histoire coh√©rente sur le d√©veloppement du B√©nin

### Donn√©es disponibles
- **Table de faits**: {len(fact_table):,} lignes, {len(fact_table.columns)} colonnes
- **Dimension Temps**: {len(dim_time)} p√©riodes
- **Dimension G√©ographie**: {len(dim_geo)} entit√©s
- **Dimension Indicateurs**: {len(dim_indicators)} indicateurs

---

## 2. Architecture des donn√©es

### Mod√®le en √©toile (Star Schema)

```
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ   Dim_Time      ‚îÇ
        ‚îÇ  - year         ‚îÇ
        ‚îÇ  - year_id      ‚îÇ
        ‚îÇ  - period       ‚îÇ
        ‚îÇ  - decade       ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                 ‚îÇ
                 ‚îÇ (1:N)
                 ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ               ‚îÇ                  ‚îÇ
‚îÇ        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îÇ
‚îÇ        ‚îÇ FACT_TABLE  ‚îÇ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ        ‚îÇ  (Centrale) ‚îÇ          ‚îÇ
‚îÇ        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îÇ
‚îÇ               ‚îÇ                  ‚îÇ
‚îÇ               ‚îÇ (1:N)            ‚îÇ (1:N)
‚îÇ               ‚îÇ                  ‚îÇ
‚îÇ      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ      ‚îÇ Dim_Geography   ‚îÇ  ‚îÇ Dim_Indicators‚îÇ
‚îÇ      ‚îÇ - geo_id        ‚îÇ  ‚îÇ - indicator_id‚îÇ
‚îÇ      ‚îÇ - name          ‚îÇ  ‚îÇ - name        ‚îÇ
‚îÇ      ‚îÇ - level         ‚îÇ  ‚îÇ - category    ‚îÇ
‚îÇ      ‚îÇ - parent_id     ‚îÇ  ‚îÇ - unit        ‚îÇ
‚îÇ      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## 3. Importation des donn√©es

### √âtape 1: Ouvrir Power BI Desktop
1. Lancer Power BI Desktop
2. Cliquer sur "Obtenir les donn√©es" > "Texte/CSV"

### √âtape 2: Importer les fichiers
Importer dans cet ordre:

1. **fact_table.csv** (Table principale)
2. **dim_time.csv** (Dimension temporelle)
3. **dim_geography.csv** (Dimension g√©ographique)
4. **dim_indicators.csv** (Dimension indicateurs)

### √âtape 3: Transformer si n√©cessaire
- V√©rifier les types de donn√©es
- S'assurer que les colonnes de jointure ont le m√™me type
- Supprimer les colonnes inutiles

---

## 4. Cr√©ation des relations

### Relations √† cr√©er

1. **Fact_Table ‚Üî Dim_Time**
   - Colonne: `year` (fact) ‚Üí `year` (dim_time)
   - Cardinalit√©: Plusieurs √† un (N:1)
   - Direction du filtre: Unique

2. **Fact_Table ‚Üî Dim_Geography**
   - Colonne: `geo_id` ou `region`/`department`/`commune` (fact) ‚Üí `geo_id` ou `name` (dim_geo)
   - Cardinalit√©: Plusieurs √† un (N:1)
   - Direction du filtre: Unique

3. **Fact_Table ‚Üî Dim_Indicators** (si applicable)
   - Utiliser une colonne pivot si les indicateurs sont en lignes
   - Sinon, relation indirecte via les noms de colonnes

### Comment cr√©er les relations
1. Aller dans "Vue Mod√®le" (ic√¥ne avec 3 tables)
2. Glisser-d√©poser les colonnes entre les tables
3. Configurer la cardinalit√© et la direction du filtre

---

## 5. Mesures DAX recommand√©es

### Mesures de base

```dax
-- Ann√©e en cours
Current_Year = MAX(Dim_Time[year])

-- Ann√©e pr√©c√©dente
Previous_Year = [Current_Year] - 1

-- Population totale
Total_Population = SUM(Fact_Table[population])

-- PIB total
Total_GDP = SUM(Fact_Table[gdp])

-- PIB par habitant
GDP_Per_Capita = 
DIVIDE(
    [Total_GDP],
    [Total_Population],
    0
)
```

### Mesures de croissance

```dax
-- Croissance annuelle (%)
YoY_Growth = 
VAR CurrentValue = [Total_Population]
VAR PreviousValue = 
    CALCULATE(
        [Total_Population],
        FILTER(
            ALL(Dim_Time),
            Dim_Time[year] = [Previous_Year]
        )
    )
RETURN
DIVIDE(
    CurrentValue - PreviousValue,
    PreviousValue,
    0
) * 100

-- Croissance cumul√©e
Cumulative_Growth = 
VAR BaseValue = 
    CALCULATE(
        [Total_Population],
        Dim_Time[year] = MIN(Dim_Time[year])
    )
VAR CurrentValue = [Total_Population]
RETURN
DIVIDE(
    CurrentValue - BaseValue,
    BaseValue,
    0
) * 100
```

### Mesures comparatives

```dax
-- Moyenne nationale
National_Average = 
CALCULATE(
    AVERAGE(Fact_Table[indicator_value]),
    ALL(Dim_Geography)
)

-- √âcart √† la moyenne
Deviation_From_Average = 
[Current_Value] - [National_Average]

-- Rang r√©gional
Regional_Rank = 
RANKX(
    ALL(Dim_Geography[name]),
    [Current_Value],
    ,
    DESC,
    DENSE
)
```

### Mesures conditionnelles

```dax
-- Indicateur de performance
Performance_Status = 
SWITCH(
    TRUE(),
    [YoY_Growth] > 5, "üü¢ Excellent",
    [YoY_Growth] > 2, "üü° Bon",
    [YoY_Growth] > -2, "üü† Stable",
    "üî¥ Pr√©occupant"
)

-- Niveau de disparit√©
Disparity_Level = 
VAR CV = [Coefficient_Variation]
RETURN
SWITCH(
    TRUE(),
    CV > 30, "√âlev√©e",
    CV > 15, "Mod√©r√©e",
    "Faible"
)
```

---

## 6. Visualisations recommand√©es

### Page 1: Vue d'ensemble (Executive Summary)

**√âl√©ments cl√©s:**

1. **Cartes (Cards)** - En haut
   - Population totale actuelle
   - PIB par habitant
   - Taux de croissance annuel
   - Nombre de r√©gions

2. **Graphique en aires empil√©es**
   - Axe X: Ann√©e
   - Axe Y: Population / PIB
   - L√©gende: R√©gions principales

3. **Carte g√©ographique** (si coordonn√©es disponibles)
   - Localisation: R√©gions
   - Taille des bulles: Population
   - Couleur: PIB par habitant

4. **Graphique en barres horizontales**
   - Axe Y: R√©gions (Top 10)
   - Axe X: Indicateur s√©lectionn√©
   - Tri: Descendant

### Page 2: Analyse d√©mographique

1. **Graphique en courbes multiples**
   - √âvolution de la population par r√©gion
   - Taux de croissance d√©mographique

2. **Pyramide des √¢ges** (si donn√©es disponibles)
   - Axe Y: Tranches d'√¢ge
   - Axe X: Population (n√©gatif pour hommes, positif pour femmes)

3. **Histogramme**
   - Distribution de la densit√© de population

4. **Matrice**
   - Lignes: R√©gions
   - Colonnes: Indicateurs d√©mographiques
   - Valeurs: Avec mise en forme conditionnelle

### Page 3: Analyse √©conomique

1. **Graphique combin√©** (ligne + colonne)
   - Colonnes: PIB par ann√©e
   - Ligne: Taux de croissance

2. **Graphique en cascade**
   - Contribution de chaque r√©gion au PIB national

3. **Nuage de points**
   - Axe X: PIB par habitant
   - Axe Y: Taux de scolarisation
   - Taille: Population
   - Couleur: R√©gion

4. **Jauge**
   - Objectif vs r√©alis√© pour indicateurs cl√©s

### Page 4: Disparit√©s r√©gionales

1. **Carte thermique (Heatmap)**
   - Lignes: R√©gions
   - Colonnes: Indicateurs
   - Couleur: Intensit√© de la valeur

2. **Graphique en bo√Æte √† moustaches**
   - Distribution des indicateurs par r√©gion

3. **Graphique en barres group√©es**
   - Comparaison multi-indicateurs par r√©gion

4. **Table avec mise en forme conditionnelle**
   - Coefficient de variation
   - Ratio max/min
   - Niveau de disparit√©

### Page 5: Tendances et projections

1. **Graphique de pr√©vision**
   - Utiliser la fonction de pr√©vision Power BI
   - Afficher l'intervalle de confiance

2. **Graphique en cascade temporel**
   - Changements ann√©e par ann√©e

3. **D√©composition hi√©rarchique**
   - Tree map: R√©gion > D√©partement > Commune

### Page 6: Actions prioritaires

1. **Table d√©taill√©e**
   - Actions recommand√©es
   - Priorit√© (avec ic√¥nes)
   - R√©gion cible
   - Indicateur concern√©

2. **Graphique en entonnoir**
   - Priorisation des actions

3. **Cartes d'information**
   - Synth√®se des insights cl√©s

---

## 7. Storytelling et structure

### Narrative recommand√©e

**Arc narratif: "Du diagnostic √† l'action"**

#### Introduction (Page 1)
- **Titre:** "B√©nin en Chiffres: Vue d'Ensemble"
- **Message:** O√π en sommes-nous aujourd'hui?
- **Visualisations:** KPIs principaux, tendances globales

#### D√©veloppement (Pages 2-4)
- **Page 2 - D√©mographie:** "Notre population: moteur ou d√©fi?"
  - Croissance d√©mographique
  - Distribution spatiale
  - Structure par √¢ge

- **Page 3 - √âconomie:** "Richesse et d√©veloppement"
  - √âvolution du PIB
  - Disparit√©s √©conomiques
  - Secteurs porteurs

- **Page 4 - Disparit√©s:** "Les in√©galit√©s √† r√©duire"
  - √âcarts r√©gionaux
  - Zones en difficult√©
  - Potentiels inexploit√©s

#### Projection (Page 5)
- **Titre:** "Vers o√π allons-nous?"
- **Message:** Anticipation et planification
- **Visualisations:** Tendances futures, sc√©narios

#### Conclusion (Page 6)
- **Titre:** "Actions pour un d√©veloppement √©quilibr√©"
- **Message:** Que devons-nous faire?
- **Visualisations:** Recommandations prioris√©es

### Principes de design

1. **Coh√©rence visuelle**
   - Palette de couleurs: Vert (#00A651), Jaune (#FCD116), Rouge (#E8112D) - couleurs du drapeau b√©ninois
   - Police: Segoe UI ou similaire
   - Espacements uniformes

2. **Hi√©rarchie de l'information**
   - Grand ‚Üí Petit: Du g√©n√©ral au particulier
   - Haut ‚Üí Bas: Du plus important au moins important

3. **Clart√©**
   - Maximum 3-4 visualisations par page
   - Titres explicites
   - Labels clairs
   - L√©gendes positionn√©es strat√©giquement

4. **Interactivit√©**
   - Utiliser le drill-through pour les d√©tails
   - Info-bulles enrichies
   - Filtres synchronis√©s entre les pages

---

## 8. Filtres et interactivit√©

### Filtres de niveau rapport (toutes les pages)

1. **Segment temporel**
   - Type: Curseur
   - Champ: Dim_Time[year]
   - Permet de s√©lectionner une p√©riode

2. **Segment g√©ographique**
   - Type: Liste d√©roulante
   - Champ: Dim_Geography[name]
   - Hi√©rarchie: R√©gion ‚Üí D√©partement ‚Üí Commune

3. **Segment par cat√©gorie d'indicateur**
   - Type: Boutons
   - Champ: Dim_Indicators[category]
   - Valeurs: D√©mographie, √âconomie, √âducation, Sant√©

### Interactions entre visualisations

**Configurer les interactions:**
1. Aller dans Format > Modifier les interactions
2. Pour chaque visuel, choisir:
   - **Filtrer:** La s√©lection filtre les autres visuels
   - **Mettre en surbrillance:** La s√©lection met en surbrillance sans filtrer
   - **Aucun:** Pas d'interaction

**Recommandations:**
- Les cartes g√©ographiques filtrent les autres visuels
- Les graphiques temporels mettent en surbrillance
- Les KPIs ne filtrent pas

### Drill-through

**Cr√©er une page de d√©tail:**
1. Page d√©di√©e: "D√©tails r√©gion"
2. Ajouter Dim_Geography[name] dans "Champs d'extraction"
3. Cr√©er des visualisations d√©taill√©es
4. Les utilisateurs peuvent cliquer-droit sur une r√©gion et "Extraire vers" cette page

### Info-bulles personnalis√©es

**Cr√©er une info-bulle:**
1. Cr√©er une nouvelle page
2. D√©finir comme "Info-bulle" dans les param√®tres
3. Ajouter des visuels compacts
4. Configurer dans les autres visuels: Format > Info-bulle > Page de rapport

---

## 9. Insights cl√©s d√©tect√©s

### üî• Tendances majeures identifi√©es

{self._format_trends_for_guide(trends)}

### üó∫Ô∏è Disparit√©s r√©gionales critiques

{self._format_disparities_for_guide(disparities)}

### üéØ Actions prioritaires recommand√©es

{self._format_actions_for_guide(priority_actions)}

---

## 10. Checklist de validation

Avant de finaliser le tableau de bord:

- [ ] Toutes les donn√©es sont import√©es correctement
- [ ] Les relations entre tables sont √©tablies
- [ ] Les mesures DAX fonctionnent sans erreur
- [ ] Chaque page a un titre clair et descriptif
- [ ] Les visualisations sont lisibles et non surcharg√©es
- [ ] Les filtres sont synchronis√©s et fonctionnels
- [ ] Les couleurs respectent la charte graphique
- [ ] Les info-bulles apportent une valeur ajout√©e
- [ ] Le storytelling est coh√©rent du d√©but √† la fin
- [ ] Le dashboard est test√© avec diff√©rents filtres
- [ ] Les performances sont acceptables (< 3s de chargement)

---

## 11. Publication et partage

### Exporter le fichier .pbix
1. Enregistrer sous: `Tache_3_Nom_Prenom_pbix_{datetime.now().strftime('%d%m')}.pbix`
2. V√©rifier la taille du fichier (< 10 MB recommand√©)

### Publier sur Power BI Service (optionnel)
1. Se connecter √† Power BI Service
2. Cliquer sur "Publier"
3. Choisir l'espace de travail
4. Configurer l'actualisation des donn√©es
5. Partager le lien du dashboard

### Cr√©er des captures d'√©cran
Pour chaque page:
1. Afficher la page en mode plein √©cran
2. Capturer (Outil capture ou Snipping Tool)
3. Sauvegarder en haute r√©solution (PNG)
4. Nommer: `Page_X_Nom_Description.png`

---

## üìû Support et ressources

- Documentation Power BI: https://docs.microsoft.com/power-bi
- Communaut√© Power BI: https://community.powerbi.com
- DAX Guide: https://dax.guide

---

**Fin du guide**
*G√©n√©r√© automatiquement - T√¢che 3 ANIP*
"""

        return guide

    def _format_trends_for_guide(self, trends: pd.DataFrame) -> str:
        """Formate les tendances pour le guide."""
        if trends.empty:
            return "*Aucune tendance identifi√©e*"

        formatted = ""
        for idx, row in trends.head(10).iterrows():
            emoji = "üìà" if row['avg_annual_growth'] > 0 else "üìâ"
            formatted += f"\n{emoji} **{row['indicator']}**: {row['trend_direction']}\n"
            formatted += f"   - Croissance annuelle moyenne: {row['avg_annual_growth']:.2f}%\n"
            formatted += f"   - Croissance totale: {row['total_growth']:.2f}%\n"

        return formatted

    def _format_disparities_for_guide(self, disparities: pd.DataFrame) -> str:
        """Formate les disparit√©s pour le guide."""
        if disparities.empty:
            return "*Aucune disparit√© majeure d√©tect√©e*"

        formatted = ""
        for idx, row in disparities.head(10).iterrows():
            formatted += f"\n‚ö†Ô∏è **{row['indicator']}**: Disparit√© {row['disparity_level']}\n"
            formatted += f"   - Coefficient de variation: {row['coefficient_variation']:.1f}%\n"
            formatted += f"   - Meilleure r√©gion: {row['best_region']} ({row['best_value']:.2f})\n"
            formatted += f"   - R√©gion √† soutenir: {row['worst_region']} ({row['worst_value']:.2f})\n"

        return formatted

    def _format_actions_for_guide(self, actions: pd.DataFrame) -> str:
        """Formate les actions pour le guide."""
        if actions.empty:
            return "*Aucune action prioritaire identifi√©e*"

        formatted = ""
        for idx, row in actions.head(10).iterrows():
            priority_emoji = "üî¥" if row['priority'] == 'Haute' else "üü°"
            formatted += f"\n{priority_emoji} **{row['theme']}** - {row['indicator']}\n"
            formatted += f"   - Probl√®me: {row['issue']}\n"
            formatted += f"   - Action: {row['action']}\n"
            if 'target_region' in row and pd.notna(row['target_region']):
                formatted += f"   - R√©gion cible: {row['target_region']}\n"

        return formatted

    def _generate_synthesis_report(self,
                                   fact_table: pd.DataFrame,
                                   trends: pd.DataFrame,
                                   disparities: pd.DataFrame,
                                   priority_actions: pd.DataFrame) -> str:
        """G√©n√®re le rapport de synth√®se."""

        report = f"""# Rapport de Synth√®se - T√¢che 3
## Visualisation & Insights Power BI - {self.config.COUNTRY_NAME}

**Date:** {datetime.now().strftime('%d/%m/%Y')}
**Auteur:** [Votre Nom]
**Projet:** ANIP - Analyse des donn√©es nationales

---

## 1. R√©sum√© Ex√©cutif

### Objectif du projet
D√©velopper un tableau de bord Power BI interactif permettant d'analyser les dynamiques d√©mographiques, √©conomiques et sociales du {self.config.COUNTRY_NAME}, d'identifier les disparit√©s r√©gionales, et de guider les d√©cisions strat√©giques en mati√®re de politiques publiques.

### Donn√©es trait√©es
- **Volume total**: {len(fact_table):,} observations
- **P√©riode couverte**: {fact_table['year'].min() if 'year' in fact_table.columns else 'N/A'} - {fact_table['year'].max() if 'year' in fact_table.columns else 'N/A'}
- **Indicateurs analys√©s**: {len(fact_table.select_dtypes(include=[np.number]).columns)}
- **Couverture g√©ographique**: Nationale avec d√©tails r√©gionaux

### Livrables
1. ‚úÖ Tableau de bord Power BI (.pbix)
2. ‚úÖ Fichiers de donn√©es optimis√©s
3. ‚úÖ Guide d'impl√©mentation d√©taill√©
4. ‚úÖ Rapport d'insights et recommandations

---

## 2. Architecture du Dashboard

### Structure multi-pages

Le tableau de bord est organis√© en 6 pages th√©matiques:

**Page 1: Vue d'ensemble**
- KPIs principaux (cartes)
- Tendances nationales globales
- Carte g√©ographique interactive
- Comparaisons r√©gionales

**Page 2: Analyse d√©mographique**
- √âvolution de la population
- Distribution spatiale
- Densit√© et croissance d√©mographique
- Structure par √¢ge et sexe

**Page 3: Dynamiques √©conomiques**
- PIB et croissance √©conomique
- PIB par habitant
- Disparit√©s √©conomiques r√©gionales
- Secteurs d'activit√©

**Page 4: √âducation et capital humain**
- Taux de scolarisation
- Infrastructure √©ducative
- Disparit√©s d'acc√®s √† l'√©ducation
- √âvolution des indicateurs

**Page 5: Sant√© et bien-√™tre**
- Indicateurs de sant√©
- Acc√®s aux soins
- √âvolution de l'esp√©rance de vie
- Disparit√©s sanitaires

**Page 6: Actions prioritaires**
- Synth√®se des insights
- Recommandations strat√©giques
- Zones prioritaires d'intervention
- Suivi des objectifs

### Mod√®le de donn√©es

**Architecture en √©toile (Star Schema)**
- Table de faits centrale: {len(fact_table):,} lignes
- 3 dimensions principales: Temps, G√©ographie, Indicateurs
- Relations 1:N optimis√©es pour les performances

---

## 3. Insights Majeurs

### 3.1 Tendances cl√©s identifi√©es

{self._format_trends_for_report(trends)}

### 3.2 Disparit√©s r√©gionales critiques

{self._format_disparities_for_report(disparities)}

### 3.3 Anomalies et points d'attention

- Ruptures de s√©ries temporelles d√©tect√©es
- Valeurs aberrantes identifi√©es et document√©es
- Incoh√©rences corrig√©es dans les donn√©es source

---

## 4. Data Storytelling

### Arc narratif: "Du diagnostic √† l'action"

#### üìä Phase 1: √âtat des lieux
**Question centrale**: O√π en est le {self.config.COUNTRY_NAME} aujourd'hui?

**√âl√©ments visuels**:
- Cartes KPIs montrant les chiffres cl√©s actuels
- Graphiques d'√©volution sur 10 ans
- Carte g√©ographique avec intensit√© par r√©gion

**Message cl√©**: Le {self.config.COUNTRY_NAME} conna√Æt une croissance soutenue mais in√©galement r√©partie.

#### üîç Phase 2: Analyse approfondie
**Question centrale**: Quelles sont les dynamiques sous-jacentes?

**√âl√©ments visuels**:
- D√©composition par secteurs
- Analyses comparatives r√©gionales
- Matrices de corr√©lation

**Message cl√©**: Les disparit√©s r√©gionales constituent le principal d√©fi √† relever.

#### üéØ Phase 3: Projections
**Question centrale**: Vers o√π allons-nous?

**√âl√©ments visuels**:
- Graphiques de pr√©vision avec intervalles de confiance
- Sc√©narios alternatifs
- Trajectoires d'objectifs

**Message cl√©**: Sans intervention cibl√©e, les √©carts vont s'accentuer.

#### üí° Phase 4: Recommandations
**Question centrale**: Que devons-nous faire?

**√âl√©ments visuels**:
- Priorisation des actions
- Cartographie des zones d'intervention
- Indicateurs de suivi

**Message cl√©**: Des actions cibl√©es peuvent r√©duire significativement les disparit√©s.

---

## 5. Recommandations Strat√©giques

### 5.1 Actions prioritaires

{self._format_actions_for_report(priority_actions)}

### 5.2 Zones g√©ographiques prioritaires

**Crit√®res d'identification**:
- Indicateurs en dessous de la moyenne nationale
- Tendances n√©gatives sur 3 ans
- Fort potentiel de croissance

**R√©gions n√©cessitant une attention particuli√®re**:
{self._identify_priority_regions(disparities)}

### 5.3 Indicateurs de suivi recommand√©s

Pour un pilotage efficace, suivre mensuellement:

1. **D√©mographie**: Taux de croissance, densit√©, migrations
2. **√âconomie**: PIB/habitant, taux d'activit√©, investissements
3. **√âducation**: Taux de scolarisation, ratio √©l√®ves/enseignants
4. **Sant√©**: Esp√©rance de vie, mortalit√©, acc√®s aux soins
5. **Infrastructure**: Taux d'√©lectrification, acc√®s √† l'eau

---

## 6. M√©thodologie

### 6.1 Collecte et traitement des donn√©es

**Sources**:
- T√¢che 1: Donn√©es brutes collect√©es (World Bank, IMF, WHO, UNDP, INSAE)
- T√¢che 2: Donn√©es enrichies avec indicateurs d√©riv√©s

**Transformations**:
- Standardisation des nomenclatures
- Normalisation des unit√©s
- Cr√©ation d'indicateurs composites
- D√©tection et traitement des anomalies

### 6.2 Choix des visualisations

**Principes appliqu√©s**:
1. **Clart√© avant esth√©tique**: Privil√©gier la lisibilit√©
2. **Un graphique = Une question**: √âviter la surcharge d'information
3. **Coh√©rence visuelle**: Couleurs et styles uniformes
4. **Interactivit√© cibl√©e**: Filtres pertinents uniquement

**Types de visualisations utilis√©s**:
- Cartes pour KPIs instantan√©s
- Graphiques en lignes pour tendances temporelles
- Cartes g√©ographiques pour distributions spatiales
- Matrices pour comparaisons multi-dimensionnelles
- Graphiques combin√©s pour relations complexes

### 6.3 Validation des r√©sultats

**Tests effectu√©s**:
- ‚úÖ Coh√©rence des calculs DAX
- ‚úÖ Exactitude des agr√©gations
- ‚úÖ Performances des requ√™tes
- ‚úÖ Compatibilit√© multi-navigateurs
- ‚úÖ Accessibilit√© des visualisations

---

## 7. Limitations et Perspectives

### 7.1 Limitations identifi√©es

**Qualit√© des donn√©es**:
- Donn√©es manquantes pour certaines p√©riodes
- Granularit√© variable selon les sources
- D√©lais de mise √† jour diff√©rents

**Techniques**:
- Impossibilit√© de cr√©er certaines visualisations avanc√©es
- Limitations de Power BI sur les calculs complexes
- Contraintes de performance sur gros volumes

### 7.2 Am√©liorations futures

**Court terme (3 mois)**:
1. Int√©grer des donn√©es en temps r√©el via API
2. Ajouter des pr√©visions avec Machine Learning
3. Cr√©er des alertes automatiques

**Moyen terme (6-12 mois)**:
1. D√©velopper un mod√®le pr√©dictif avanc√©
2. Int√©grer des donn√©es satellites pour le suivi spatial
3. Cr√©er des dashboards sectoriels sp√©cialis√©s

**Long terme (12+ mois)**:
1. Plateforme nationale de donn√©es ouvertes
2. Int√©gration avec syst√®mes de gestion existants
3. Application mobile d√©di√©e

---

## 8. Guide d'Utilisation du Dashboard

### 8.1 Navigation

**Acc√®s aux pages**:
- Utiliser le menu de navigation √† gauche
- Cliquer sur les onglets en haut
- Utiliser les boutons de navigation personnalis√©s

**Filtres globaux** (affectent toutes les pages):
- S√©lecteur d'ann√©es (curseur)
- S√©lecteur de r√©gions (liste d√©roulante)
- Cat√©gories d'indicateurs (boutons)

### 8.2 Interactions

**S√©lection dans un visuel**:
- Clic simple: Filtre les autres visuels de la page
- Ctrl+Clic: S√©lection multiple
- Clic droit: Menu contextuel avec options

**Drill-down**:
- Activer le mode drill-down (ic√¥ne fl√®che)
- Cliquer sur un √©l√©ment pour descendre dans la hi√©rarchie
- Exemple: Pays ‚Üí R√©gion ‚Üí D√©partement ‚Üí Commune

**Extraction (Drill-through)**:
- Clic droit sur un √©l√©ment
- S√©lectionner "Extraire vers..."
- Choisir la page de d√©tail

### 8.3 Export et partage

**Exporter des donn√©es**:
1. Clic sur "..." en haut √† droite du visuel
2. S√©lectionner "Exporter les donn√©es"
3. Choisir le format (CSV ou Excel)

**Exporter une image**:
1. Afficher le visuel en mode Focus
2. Clic sur "..."
3. S√©lectionner "Exporter" > "Image"

**Partager le dashboard**:
- Via lien (si publi√© sur Power BI Service)
- Via fichier .pbix (pour utilisateurs Power BI Desktop)
- Via captures d'√©cran pour pr√©sentations

---

## 9. Maintenance et Actualisation

### 9.1 Fr√©quence de mise √† jour recommand√©e

**Donn√©es**:
- Mensuelle: Indicateurs √©conomiques rapides
- Trimestrielle: Donn√©es d√©mographiques
- Annuelle: Donn√©es de recensement

**Dashboard**:
- Hebdomadaire: V√©rification de l'int√©grit√©
- Mensuelle: Ajout de nouvelles visualisations si besoin
- Trimestrielle: R√©vision compl√®te

### 9.2 Proc√©dure d'actualisation

1. **R√©cup√©rer les nouvelles donn√©es**
   - Ex√©cuter les scripts de collecte (T√¢che 1)
   - Ex√©cuter les traitements (T√¢che 2)
   - Ex√©cuter la pr√©paration Power BI (T√¢che 3)

2. **Actualiser dans Power BI**
   - Ouvrir le fichier .pbix
   - Cliquer sur "Actualiser" dans le ruban Accueil
   - V√©rifier l'absence d'erreurs

3. **Valider les r√©sultats**
   - Comparer les KPIs avec les valeurs attendues
   - V√©rifier les visualisations
   - Tester les filtres

4. **Republier**
   - Enregistrer le fichier .pbix
   - Publier sur Power BI Service
   - Notifier les utilisateurs des changements

---

## 10. Conclusion

### Synth√®se

Ce tableau de bord Power BI constitue un outil d√©cisionnel complet pour:
- **Monitorer** l'√©volution des indicateurs cl√©s du {self.config.COUNTRY_NAME}
- **Identifier** les zones n√©cessitant une intervention prioritaire
- **Guider** les politiques publiques par des donn√©es objectives
- **Communiquer** efficacement avec les parties prenantes

### Valeur ajout√©e

‚úÖ **Gain de temps**: Centralisation de toutes les donn√©es en un seul endroit
‚úÖ **Fiabilit√©**: Processus automatis√© de collecte et traitement
‚úÖ **Accessibilit√©**: Interface intuitive ne n√©cessitant pas de comp√©tences techniques
‚úÖ **Actionnabilit√©**: Insights directement exploitables pour la prise de d√©cision

### Impact attendu

**Court terme**:
- Am√©lioration de la prise de d√©cision bas√©e sur les donn√©es
- R√©duction du temps de reporting

**Moyen terme**:
- Meilleure allocation des ressources publiques
- R√©duction mesurable des disparit√©s r√©gionales

**Long terme**:
- Culture data-driven dans l'administration
- Am√©lioration des indicateurs de d√©veloppement national

---

## Annexes

### Annexe A: Glossaire des indicateurs

**D√©mographiques**:
- **Population totale**: Nombre d'habitants recens√©s
- **Taux de croissance**: Variation annuelle en pourcentage
- **Densit√©**: Habitants par km¬≤
- **Ratio de d√©pendance**: (0-14 ans + 65+ ans) / (15-64 ans)

**√âconomiques**:
- **PIB**: Produit Int√©rieur Brut en USD courants
- **PIB/habitant**: PIB divis√© par la population
- **Taux de croissance du PIB**: Variation annuelle du PIB r√©el
- **Indice de d√©veloppement**: Composite normalis√© (0-100)

**√âducation**:
- **Taux net de scolarisation**: % d'enfants scolaris√©s dans la bonne tranche d'√¢ge
- **Ratio √©l√®ves/enseignant**: Nombre moyen d'√©l√®ves par enseignant
- **Taux d'alphab√©tisation**: % de la population sachant lire et √©crire

**Sant√©**:
- **Esp√©rance de vie**: Nombre moyen d'ann√©es de vie √† la naissance
- **Taux de mortalit√© infantile**: D√©c√®s pour 1000 naissances vivantes
- **Acc√®s aux soins**: % de population ayant acc√®s √† un centre de sant√©

### Annexe B: Sources de donn√©es

1. **World Bank** (https://data.worldbank.org)
   - Indicateurs √©conomiques et sociaux
   - S√©ries temporelles longues
   - Couverture: 2015-2024

2. **FMI** (https://www.imf.org)
   - Indicateurs macro√©conomiques
   - Pr√©visions √©conomiques
   - Couverture: 2015-2024

3. **WHO** (https://www.who.int)
   - Indicateurs de sant√©
   - Statistiques sanitaires
   - Couverture: 2015-2024

4. **UNDP** (https://hdr.undp.org)
   - Indice de d√©veloppement humain
   - Indicateurs composites
   - Couverture: 2015-2022

5. **INSAE B√©nin** (https://www.insae-bj.org)
   - Donn√©es nationales officielles
   - Recensements et enqu√™tes
   - Couverture variable

### Annexe C: Formules DAX cl√©s

```dax
-- Taux de croissance ann√©e sur ann√©e
YoY_Growth = 
VAR CurrentYear = MAX(Dim_Time[year])
VAR PreviousYear = CurrentYear - 1
VAR CurrentValue = 
    CALCULATE(
        SUM(Fact_Table[value]),
        Dim_Time[year] = CurrentYear
    )
VAR PreviousValue = 
    CALCULATE(
        SUM(Fact_Table[value]),
        Dim_Time[year] = PreviousYear
    )
RETURN
DIVIDE(
    CurrentValue - PreviousValue,
    PreviousValue,
    BLANK()
) * 100

-- √âcart √† la moyenne nationale
Deviation_From_National_Avg = 
VAR CurrentValue = SUM(Fact_Table[value])
VAR NationalAvg = 
    CALCULATE(
        AVERAGE(Fact_Table[value]),
        ALL(Dim_Geography)
    )
RETURN
CurrentValue - NationalAvg

-- Rang par r√©gion
Regional_Rank = 
RANKX(
    ALL(Dim_Geography[name]),
    CALCULATE(SUM(Fact_Table[value])),
    ,
    DESC,
    DENSE
)

-- Pourcentage du total
Pct_Of_Total = 
DIVIDE(
    SUM(Fact_Table[value]),
    CALCULATE(
        SUM(Fact_Table[value]),
        ALL(Dim_Geography)
    ),
    0
) * 100
```

### Annexe D: Contacts et support

**√âquipe projet ANIP**:
- Chef de projet: [Nom]
- Analyste de donn√©es: [Nom]
- D√©veloppeur Power BI: [Nom]

**Support technique**:
- Email: support@anip.bj
- T√©l√©phone: +229 XX XX XX XX

**Ressources en ligne**:
- Documentation: [URL]
- Vid√©os tutoriels: [URL]
- Forum communautaire: [URL]

---

**Fin du rapport de synth√®se**

*Document g√©n√©r√© automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
*Projet ANIP - Agence Nationale pour la Promotion des Investissements - {self.config.COUNTRY_NAME}*
"""

        return report

    def _format_trends_for_report(self, trends: pd.DataFrame) -> str:
        """Formate les tendances pour le rapport."""
        if trends.empty:
            return "*Aucune tendance majeure identifi√©e dans les donn√©es disponibles.*"

        formatted = "\n"

        # Tendances positives
        positive = trends[trends['avg_annual_growth'] > 2].head(5)
        if not positive.empty:
            formatted += "**üìà Tendances positives:**\n\n"
            for idx, row in positive.iterrows():
                formatted += f"- **{row['indicator']}**: Croissance de {row['avg_annual_growth']:.1f}% par an "
                formatted += f"({row['total_growth']:.1f}% sur la p√©riode)\n"
            formatted += "\n"

        # Tendances n√©gatives
        negative = trends[trends['avg_annual_growth'] < -2].head(5)
        if not negative.empty:
            formatted += "**üìâ Tendances pr√©occupantes:**\n\n"
            for idx, row in negative.iterrows():
                formatted += f"- **{row['indicator']}**: D√©clin de {abs(row['avg_annual_growth']):.1f}% par an "
                formatted += f"({row['total_growth']:.1f}% sur la p√©riode)\n"
            formatted += "\n"

        # Tendances stables
        stable = trends[
            (trends['avg_annual_growth'] >= -2) &
            (trends['avg_annual_growth'] <= 2)
            ].head(3)
        if not stable.empty:
            formatted += "**‚û°Ô∏è Indicateurs stables:**\n\n"
            for idx, row in stable.iterrows():
                formatted += f"- **{row['indicator']}**: Variation de {row['avg_annual_growth']:.1f}% par an\n"
            formatted += "\n"

        return formatted

    def _format_disparities_for_report(self, disparities: pd.DataFrame) -> str:
        """Formate les disparit√©s pour le rapport."""
        if disparities.empty:
            return "*Aucune disparit√© r√©gionale significative d√©tect√©e.*"

        formatted = "\n"

        # Disparit√©s √©lev√©es
        high = disparities[disparities['disparity_level'] == '√âlev√©e'].head(5)
        if not high.empty:
            formatted += "**üî¥ Disparit√©s √©lev√©es (action urgente requise):**\n\n"
            for idx, row in high.iterrows():
                formatted += f"- **{row['indicator']}**\n"
                formatted += f"  - Coefficient de variation: {row['coefficient_variation']:.1f}%\n"
                formatted += f"  - √âcart max/min: ratio de {row['max_min_ratio']:.1f}\n"
                formatted += f"  - Meilleure performance: {row['best_region']} ({row['best_value']:.2f})\n"
                formatted += f"  - Performance √† am√©liorer: {row['worst_region']} ({row['worst_value']:.2f})\n\n"

        # Disparit√©s mod√©r√©es
        moderate = disparities[disparities['disparity_level'] == 'Mod√©r√©e'].head(3)
        if not moderate.empty:
            formatted += "**üü° Disparit√©s mod√©r√©es (surveillance recommand√©e):**\n\n"
            for idx, row in moderate.iterrows():
                formatted += f"- **{row['indicator']}**: CV = {row['coefficient_variation']:.1f}%, "
                formatted += f"Ratio = {row['max_min_ratio']:.1f}\n"

        return formatted

    def _format_actions_for_report(self, actions: pd.DataFrame) -> str:
        """Formate les actions pour le rapport."""
        if actions.empty:
            return "*Aucune action prioritaire identifi√©e sur la base des donn√©es actuelles.*"

        formatted = "\n"

        # Grouper par th√®me
        if 'theme' in actions.columns:
            themes = actions['theme'].unique()

            for theme in themes:
                theme_actions = actions[actions['theme'] == theme]
                if not theme_actions.empty:
                    formatted += f"**{theme}:**\n\n"

                    for idx, row in theme_actions.head(3).iterrows():
                        priority_mark = "üî¥" if row['priority'] == 'Haute' else "üü°"
                        formatted += f"{priority_mark} {row['action']}\n"
                        formatted += f"   - Probl√®me identifi√©: {row['issue']}\n"
                        if 'target_region' in row and pd.notna(row['target_region']):
                            formatted += f"   - Zone d'intervention: {row['target_region']}\n"
                        formatted += "\n"
        else:
            # Format simple si pas de th√®me
            for idx, row in actions.head(10).iterrows():
                priority_mark = "üî¥" if row['priority'] == 'Haute' else "üü°"
                formatted += f"{priority_mark} {row['action']}\n"
                formatted += f"   - {row['issue']}\n\n"

        return formatted

    def _identify_priority_regions(self, disparities: pd.DataFrame) -> str:
        """Identifie les r√©gions prioritaires."""
        if disparities.empty:
            return "*Analyse insuffisante pour identifier des r√©gions prioritaires.*"

        formatted = "\n"

        # Identifier les r√©gions apparaissant le plus souvent comme "worst_region"
        if 'worst_region' in disparities.columns:
            region_counts = disparities['worst_region'].value_counts().head(5)

            formatted += "**R√©gions n√©cessitant une attention particuli√®re:**\n\n"
            for region, count in region_counts.items():
                formatted += f"- **{region}**: Identifi√©e comme sous-performante sur {count} indicateurs\n"
            formatted += "\n"

        return formatted


# %%
def main():
    """Point d'entr√©e principal pour la pr√©paration Power BI."""

    # Configuration de l'environnement
    setup_powerbi_environment(log_dir=Path("logs_task_3"))

    # Cr√©ation de l'orchestrateur
    orchestrator = PowerBIOrchestrator()

    # Ex√©cution de la pr√©paration compl√®te
    results = orchestrator.run_complete_preparation()

    return results


# %%
# Ex√©cution
if __name__ == "__main__":
    results = main()